using System;
using System.IO;
using System.Collections.Generic;
using Gtk;
using MessageDialogs = Moscrif.IDE.Controls.MessageDialog;
using Moscrif.IDE.Iface.Entities;
using Moscrif.IDE.Components;
using Moscrif.IDE.Tool;
using Moscrif.IDE.Workspace;

namespace Moscrif.IDE.Controls.Wizard
{
	public partial class NewProjectWizzard_Old : Gtk.Dialog
	{
		protected TreeStore store;
		//protected List<SettingPanel> list ;
		int curentPage = 1;
		int minPage = 0;
		int maxPage = 5;

		bool isNameChange = false;

		bool isApplicationType = false;

		Gtk.ListStore fontListStore = new Gtk.ListStore(typeof(string), typeof(string), typeof(bool),typeof(string),typeof(string));
		Gtk.ListStore libsListStore = new Gtk.ListStore(typeof(string), typeof(string), typeof(bool), typeof(bool),typeof(string));
		List<string> fonts = new List<string>();
		List<string> projectLibs = new List<string>();
		FileMaskEntry  feOutput;
		FileMaskEntry  feOutputWorkspace;
		Gtk.Menu popupCondition;

		Workspace.Workspace workspace;
		bool createWorkspace = false;

		ApplicationFileControl afc;

		AppFile appFile;
		Project prj;

		public NewProjectWizzard_Old()
		{
			this.Build();

			if(MainClass.Workspace == null || String.IsNullOrEmpty(MainClass.Workspace.FilePath) ){
				workspace = new Workspace.Workspace();
				workspace.Name="Workspace_1"; 
				workspace.RootDirectory = MainClass.Paths.WorkDir;
				workspace.OutputDirectory = System.IO.Path.Combine(MainClass.Settings.WorkspaceMaskDirectory[0],"output");

				createWorkspace = true;
				curentPage = 0;
			} else {
				minPage =curentPage;
				workspace = null;
			}

			textview1.Editable = false;
			this.TransientFor = MainClass.MainWindow;
			//this.Title = title;

			prj = new Project();

			prj.ProjectOutput = "$(workspace_dir)\\output";
			prj.ProjectArtefac = "Prj1_$(Platform)_$(Resolution)";
			prj.FilePath = "./Prj1.msp";

			appFile = new AppFile();//, projectDir);
			appFile.Uses = "core ui uix uix-skin media sqlite net game2d crypto box2d graphics sensor";
			appFile.Main = "main.ms";
			appFile.Author = "Generated by Moscrif-Ide";
			appFile.Title = "Prj1";
			appFile.Copyright = " ";
			appFile.Version = "1.0";
			appFile.Orientation = "portrait";
			appFile.Description=" ";
			appFile.Homepage=" ";

			prj.AppFile =appFile;

			afc = new ApplicationFileControl(appFile,ApplicationFileControl.Mode.Create,this);

			projectLibs = new List<string>(appFile.Libs);

			GenerateTree();

			// PAGE 0 - WORKSPACE 
			if(createWorkspace){
				feOutputWorkspace =new FileMaskEntry(MainClass.Settings.WorkspaceMaskDirectory,workspace,this);

				table1.Attach(feOutputWorkspace,1,2,2,3,AttachOptions.Fill,AttachOptions.Shrink,5,0);

				entWorkspace.Text = workspace.Name;

				feRoot.DefaultPath = workspace.RootDirectory;
				feOutputWorkspace.DefaultPath = MainClass.Paths.WorkDir;
				feOutputWorkspace.VisiblePath = System.IO.Path.Combine(MainClass.Settings.WorkspaceMaskDirectory[0],"output");
			}

			// PAGE 1 - PROJECT GENERAL - App Typ
			ListStore appTypModel = new ListStore(typeof(string), typeof(string));
			cbAppTyp.Model= appTypModel;
			//TreeIter ti = new TreeIter();
			int selInt = 0;

			for(int i = 0 ;i< MainClass.Settings.ApplicationType.Count; i++ ){
				SettingValue ds = MainClass.Settings.ApplicationType[i];
				appTypModel.AppendValues(ds.Display,ds.Value);
				if(ds.Value == prj.ApplicationType)
					selInt = i;
			}

			cbAppTyp.Active =selInt;

			feOutput = new FileMaskEntry(MainClass.Settings.WorkspaceMaskDirectory,prj,this);
			feOutput.IsFolder = true;

			feOutput.VisiblePath  = prj.ProjectOutput;
			entrProjectName.Text = "Prj1";
			entrName.Text = prj.ProjectArtefac;

			tblPage1.Attach(feOutput,1,2,1,2,AttachOptions.Fill, AttachOptions.Shrink, 0, 0);

			Gdk.Pixbuf default_pixbuf = null;
			string file = System.IO.Path.Combine(MainClass.Paths.ResDir, "stock-menu.png");
			popupCondition = new Gtk.Menu();
			if (System.IO.File.Exists(file)) {
				default_pixbuf = new Gdk.Pixbuf(file);

				Gtk.Button btnClose = new Gtk.Button(new Gtk.Image(default_pixbuf));
				btnClose.TooltipText = MainClass.Languages.Translate("insert_condition_name");
				btnClose.Relief = Gtk.ReliefStyle.None;
				btnClose.CanFocus = false;
				btnClose.WidthRequest = btnClose.HeightRequest = 19;

				popupCondition.AttachToWidget(btnClose,new Gtk.MenuDetachFunc(DetachWidget));

				btnClose.Clicked += delegate {
					popupCondition.Popup(null,null, new Gtk.MenuPositionFunc (GetPosition) ,3,Gtk.Global.CurrentEventTime);

				};
				tblPage1.Attach(btnClose,2,3, 0,1, AttachOptions.Shrink, AttachOptions.Shrink, 0, 0);
				btnClose.ShowAll();
			}
			AddMenuItem(MainClass.Settings.Platform.Name);
			AddMenuItem(MainClass.Settings.Resolution.Name);
			popupCondition.ShowAll();


			// PAGE 2 - SKIN/FONT - Font

			nvFonts.Model = fontListStore;

			CellRendererToggle crt = new CellRendererToggle();
			crt.Activatable = true;
			crt.Toggled += delegate(object o, ToggledArgs args) {
					TreeIter iter;
					if (fontListStore.GetIter (out iter, new TreePath(args.Path))) {
						bool old = (bool) fontListStore.GetValue(iter,2);
					 	string font = (string) fontListStore.GetValue(iter,4);

						if(old)
							fonts.Remove(font);
						else fonts.Add(font);

						fontListStore.SetValue(iter,2,!old);
				}
			};

			nvFonts.AppendColumn("", crt , "active", 2);
			nvFonts.AppendColumn(MainClass.Languages.Translate("name"), new Gtk.CellRendererText(), "text", 0);
			nvFonts.AppendColumn(MainClass.Languages.Translate("location"), new Gtk.CellRendererText(), "text", 3);

			string[] listFont;

			if(!createWorkspace){
				listFont = Directory.GetFiles(MainClass.Workspace.RootDirectory, "*.ttf");

				if(MainClass.Platform.IsMac){ // for Mac UpperCase
					string[]  listFont2 =  Directory.GetFiles(MainClass.Workspace.RootDirectory, "*.TTF");				

					var list = new List<string>();
					list.AddRange(listFont2);
					list.AddRange(listFont);
					listFont = list.ToArray();
				}

			} else {
				listFont = Directory.GetFiles(MainClass.Settings.LibDirectory, "*.ttf");
				if(MainClass.Platform.IsMac){
					string[]  listFont2 =  Directory.GetFiles(MainClass.Settings.LibDirectory, "*.TTF");				

					var list = new List<string>();
					list.AddRange(listFont2);
					list.AddRange(listFont);
					listFont = list.ToArray();
				}
			}

			foreach (string fi in listFont) {
				string fontname = System.IO.Path.GetFileName(fi);
				if(fontname.Contains(" ") ){
					MainClass.MainWindow.OutputConsole.WriteError("IGNORE FONT : '"+fontname+"' Invalid name contains a spacenvalid name contains a space \n");
					continue;
				}
				fontListStore.AppendValues(System.IO.Path.GetFileName(fi), fi,false,MainClass.Languages.Translate("location_workspace"),System.IO.Path.GetFileName(fi));
			}

			// PAGE 3 - LIBS - Libs

			tvLibs.Model = libsListStore;

			CellRendererToggle crt2 = new CellRendererToggle();
			crt2.Activatable = true;
			crt2.Toggled += delegate(object o, ToggledArgs args) {

				TreeIter iter;
				if (libsListStore.GetIter (out iter, new TreePath(args.Path))) {
					bool old = (bool) libsListStore.GetValue(iter,2);
				 	string libSelect = (string) libsListStore.GetValue(iter,0);

					if(old)
						projectLibs.Remove(libSelect);
					else projectLibs.Add(libSelect);
					afc.AppFile.Uses =  string.Join(" ",projectLibs.ToArray());

					libsListStore.SetValue(iter,2,!old);
				}
			};

			tvLibs.AppendColumn("", crt2 , "active", 2);
			tvLibs.AppendColumn(MainClass.Languages.Translate("lib_name"), new Gtk.CellRendererText(), "text", 0);
			tvLibs.AppendColumn(MainClass.Languages.Translate("workspace_location"), new Gtk.CellRendererText(), "text", 1);

			LoadLibs();

			//PAGE 4 - PROJECT PROPERTIES - App

			afc = new ApplicationFileControl(appFile,ApplicationFileControl.Mode.Create,this);
			vbPage4.PackStart(afc, true, true, 0);
			vbPage4.ShowAll();



			//entrName.Events = Gdk.EventMask.AllEventsMask;
			entrName.KeyReleaseEvent+= delegate(object o, KeyReleaseEventArgs args)
			{
				Console.WriteLine("entrName.KeyReleaseEvent" );
				isNameChange = true;
			};

			//entrProjectName.Events = Gdk.EventMask.AllEventsMask;
			entrProjectName.KeyPressEvent+= delegate(object o, KeyPressEventArgs args)
			{
				Console.WriteLine("entrProjectName.KeyReleaseEvent 1" );
				if(!isNameChange){
					Console.WriteLine("entrProjectName.KeyReleaseEvent 2" );
					entrName.Text = entrProjectName.Text+"_$(Platform)_$(Resolution)";
				}
			};


		}

		private void DetachWidget(Gtk.Widget attach_widget, Gtk.Menu menu){}

		static void GetPosition(Gtk.Menu menu, out int x, out int y, out bool push_in){

			menu.AttachWidget.GdkWindow.GetOrigin(out x, out y);

			x =menu.AttachWidget.Allocation.X+x;//+menu.AttachWidget.WidthRequest;
			y =menu.AttachWidget.Allocation.Y+y+menu.AttachWidget.HeightRequest;

			push_in = true;
		}

		private void GenerateTree()
		{
			store = new TreeStore( typeof(string), typeof(bool),typeof(bool), typeof(int));

			ntpPages.ShowTabs = false;

			tvSteps.Model = store;
			tvSteps.HeadersVisible = false;

			TreeViewColumn col = new TreeViewColumn();

			CellRendererText crt = new CellRendererText();
			col.PackStart(crt, true);
			col.AddAttribute(crt, "markup", 0);

			col.AddAttribute(crt, "sensitive", 2);

			tvSteps.AppendColumn(col);

			ntpPages.Page  = curentPage;

			FillTree();

			TreeIter ti;
			if (store.GetIter(out ti,new TreePath(curentPage.ToString()))){
				tvSteps.Selection.SelectIter(ti);
				store.SetValue(ti,2,true);
			}

		}

		public void FillTree()
		{
			//list = new List<SettingPanel>();
			store.Clear();
			//if(minPage== 0)
			store.AppendValues("Workspace", true, false, 0);

			store.AppendValues("Generic", true, false, 1);
			store.AppendValues("Skin/Font", true, false, 2);
			store.AppendValues("Libraries", true, false, 3);
			store.AppendValues("Properties", true, false, 4);
			store.AppendValues("Summary", true, false, 5);
		}

		private void AddMenuItem(string condition)
		{
			Gtk.MenuItem mi = new Gtk.MenuItem(condition);
			mi.Name = condition;
			mi.Activated += delegate(object sender, EventArgs e) {
				if (sender.GetType() == typeof(Gtk.MenuItem)){
					entrName.Text = entrName.Text = String.Format("{0}$({1})", entrName.Text, (sender as Gtk.MenuItem).Name);
				}
			};
			popupCondition.Add(mi);

		}

		private void LoadLibs(){
			libsListStore.Clear();

			DirectoryInfo dirWorkspace;

			if(!createWorkspace){
				dirWorkspace = new DirectoryInfo(MainClass.Workspace.RootDirectory);
			} else {
				dirWorkspace = new DirectoryInfo(MainClass.Settings.LibDirectory);
			}
			DirectoryInfo[] di = dirWorkspace.GetDirectories("*",SearchOption.TopDirectoryOnly);
			List<DirectoryInfo> listWorkspaceLibs = new List<DirectoryInfo>(di);

			projectLibs = new List<string>(afc.AppFile.Libs);

			foreach (string lib in MainClass.Settings.LibsDefine) {
				bool isSelect = false;

				string state = MainClass.Languages.Translate("not_included");
				bool missing = true;
				DirectoryInfo libsDirectory = listWorkspaceLibs.Find(x=> x.Name == lib);


				if(libsDirectory != null){
					missing = false;
					state = MainClass.Languages.Translate("copied");
					if ((libsDirectory.Attributes & FileAttributes.ReparsePoint) == FileAttributes.ReparsePoint){// links
						state = MainClass.Languages.Translate("linked");
					}
				}

				string framneworkLibPath = System.IO.Path.Combine(MainClass.Settings.LibDirectory,lib);
				if(!Directory.Exists(framneworkLibPath ) ){
					missing = false;
					state = MainClass.Languages.Translate("error_missing_libs");
				}
				int indx = projectLibs.FindIndex(x=>x==lib);
				if(indx> -1) isSelect= true;

				Gtk.TreeIter ti = libsListStore.AppendValues(lib, state,isSelect,missing,framneworkLibPath);
			}
		}

		protected void OnBtnNextClicked (object sender, System.EventArgs e)
		{
			if(curentPage==maxPage ) {
				//FINISH HER

				if(createWorkspace){

					string workspaceName = workspace.Name;
					string workspaceOutput = workspace.OutputDirectory;
					string workspaceRoot =workspace.RootDirectory;
					bool copyLibs = cbCopyLibs.Active;

					string workspaceFile = System.IO.Path.Combine(workspaceRoot, workspaceName + ".msw");

					MainClass.MainWindow.CreateWorkspace(workspaceFile,workspaceName,workspaceOutput,workspaceRoot,copyLibs);

				}
				string projectName = MainClass.Tools.RemoveDiacritics(entrProjectName.Text).Replace(" ","_");

				prj.FilePath = System.IO.Path.Combine(MainClass.Workspace.RootDirectory,projectName+".msp");

				string appFile = "" ;
				if(!createWorkspace){
					appFile = System.IO.Path.Combine(MainClass.Workspace.RootDirectory,projectName+".app");
				} else {
					appFile = System.IO.Path.Combine(workspace.RootDirectory,projectName+".app");
				}
				afc.AppFile.ApplicationFile =appFile;//= System.IO.Path.Combine(MainClass.Workspace.RootDirectory,projectName+".app");


				if(isApplicationType){
					prj= MainClass.Workspace.CreateProject(prj,afc.AppFile,skinThemeControl.GetSkin(),skinThemeControl.GetTheme(),fonts.ToArray());
				} else {
					prj= MainClass.Workspace.CreateProject(prj,afc.AppFile,string.Empty,string.Empty,fonts.ToArray());
				}
				MainClass.MainWindow.AddAndShowProject(prj,true);

				this.Respond(ResponseType.Ok);
			};

			if(curentPage == 2) {
			   if (!CheckPage2()) return;

			}

			if (curentPage == 1){
				if (!CheckPage1()) return;

				prj.ProjectOutput = feOutput.Path;
				prj.ProjectArtefac = entrName.Text;

				if(!afc.TitleChange){
					appFile.Title = entrProjectName.Text;
					afc.SetTitle(entrProjectName.Text);
				}

				if(!isApplicationType){
					//curentPage++;
					skinThemeControl.Sensitive = false;
				} else {
					skinThemeControl.Sensitive = true;
				}
			}
			if(curentPage == 0){
				if(!CheckPage0()) return;

				workspace.OutputDirectory = feOutputWorkspace.Path;
				string worksp = MainClass.Tools.RemoveDiacritics(this.entWorkspace.Text).Replace(" ","_");
				string workspaceFile = System.IO.Path.Combine(feRoot.Path, worksp + ".msw");
				workspace.Name = worksp;
				workspace.FilePath = workspaceFile;

				if (cbSubFolder.Active ){
					workspace.RootDirectory =  System.IO.Path.Combine(this.feRoot.Path,worksp);
				}
				else { 
					workspace.RootDirectory = feRoot.Path;
				}

				//workspace.RootDirectory = feRoot.Path;
			}

			btnBack.Sensitive = true;

			curentPage++;

			ntpPages.Page = curentPage;

			TreeIter ti = new TreeIter();
			store.GetIter( out ti, new TreePath(curentPage.ToString()));
			store.SetValue(ti,2,true);

			tvSteps.Selection.UnselectAll();
			tvSteps.Selection.SelectIter(ti);

			//if(curentPage == maxPage)
			//	btnNext.Sensitive = false;

			if(curentPage == maxPage){
				LoadSumary();
				btnNext.Label="Finish";
			}

		}

		protected void OnBtnBackClicked (object sender, System.EventArgs e)
		{
			btnNext.Sensitive = true;
			btnNext.Label="Next";

			if (curentPage == 3){
				if(!isApplicationType){
				//	curentPage--;
				}
			}

			if(curentPage == minPage){
				return;
			} else {
				curentPage--;
				ntpPages.Page = curentPage;

				TreeIter ti = new TreeIter();
				store.GetIter( out ti, new TreePath(curentPage.ToString()));
				store.SetValue(ti,2,true);

				tvSteps.Selection.UnselectAll();
				tvSteps.Selection.SelectIter(ti);

			}
			if(curentPage == minPage)
				btnBack.Sensitive = false;
		}

		private void LoadSumary(){

			textview1.Buffer.Clear();

			if(!createWorkspace){
				InsertSumary("Workspace:\t\t" + MainClass.Workspace.Name);
				InsertSumary("Workspace Path : " + MainClass.Workspace.RootDirectory);
			} else {
				InsertSumary("Workspace:\t\t" + workspace.Name);
				InsertSumary("Workspace Path : " + workspace.RootDirectory);
			}

			InsertSumary("Project:\t\t\t" + MainClass.Tools.RemoveDiacritics(entrProjectName.Text).Replace(" ","_")); //entrProjectName.Text);
			InsertSumary("Project typ:\t\t" + prj.ApplicationType );
			InsertSumary("Output name:\t" + prj.ProjectArtefac );

			if(isApplicationType){
				InsertSumary("Skin :\t\t\t" +  skinThemeControl.GetSkin());
				InsertSumary("Theme:\t\t\t" +  skinThemeControl.GetTheme());
				InsertSumary("Fonts:\t\t\t"+string.Join(" ",fonts.ToArray()));
			}

			InsertSumary("Title:\t\t\t" + afc.AppFile.Title );
			InsertSumary("Orientation:\t\t" + afc.AppFile.Orientation );
			InsertSumary("Libs:\t\t\t" + afc.AppFile.Uses );
		}

		private void InsertSumary(string message){
			TextIter it = textview1.Buffer.EndIter;
			textview1.Buffer.Insert(ref it,message+"\n");
		}

		private bool CheckPage1(){
			if(string.IsNullOrEmpty(entrProjectName.Text) ){
				MessageDialogs md = new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("please_set_project_name"), "", Gtk.MessageType.Error,this);
				md.ShowDialog();
				return false;
			}

			if(entrProjectName.Text.Contains(" ")){
				MessageDialogs md =
				new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("error_whitespace_proj"),"", Gtk.MessageType.Error);
				md.ShowDialog();
				return false;
			}

			if(!createWorkspace){

				string prj = MainClass.Tools.RemoveDiacritics(entrProjectName.Text).Replace(" ","_");
				string filePath = System.IO.Path.Combine(MainClass.Workspace.RootDirectory,prj+".msp");
				if(File.Exists(filePath)){

					MessageDialogs md = new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("project_exist"), "", Gtk.MessageType.Error,this);
					md.ShowDialog();
					return false;
				}
			}
			/*foreach (string f in MainClass.Workspace.ProjectsFile){
				string p = System.IO.Path.GetFileNameWithoutExtension(f);
				if (prj.ToUpper() == p.ToUpper()){
					MessageDialogs md = new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("project_exist"), "", Gtk.MessageType.Error,this);
					md.ShowDialog();
					return false;
				}
			}*/
			return true;
		}

		private bool CheckPage2(){
			if(isApplicationType){
				if(string.IsNullOrEmpty(skinThemeControl.GetSkin()) ||  string.IsNullOrEmpty(skinThemeControl.GetTheme())){
					MessageDialogs md = new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("pleas_select_skin_theme"), "", Gtk.MessageType.Error,this);
					md.ShowDialog();
					return false;
				}
			}
			return true;
		}

		private bool CheckPage0(){

			if(entWorkspace.Text.Contains(" ")){
				MessageDialogs md =
				new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("error_whitespace_work"),"", Gtk.MessageType.Error);
				md.ShowDialog();
				return false;
			}

			if(feRoot.Path.Contains(" ")){
				MessageDialogs md =
				new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("error_whitespace_work_path"),"", Gtk.MessageType.Error);
				md.ShowDialog();
				return false;
			}


			if  (String.IsNullOrEmpty(entWorkspace.Text)){
					MessageDialogs md =
					new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("please_set_workspace_name"),"", Gtk.MessageType.Error);
					md.ShowDialog();
					return false;
			}

			if  (String.IsNullOrEmpty(feOutput.Path)){
					MessageDialogs md =
					new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("please_set_workspace_output"),"", Gtk.MessageType.Error);
					md.ShowDialog();
					return false;
			}

			if  (String.IsNullOrEmpty(feRoot.Path)){
					MessageDialogs md =
					new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("please_set_workspace_root"),"", Gtk.MessageType.Error);
					md.ShowDialog();
					return false;
			}

			string root = "";
			string worksp = MainClass.Tools.RemoveDiacritics(this.entWorkspace.Text).Replace(" ","_");

			if (cbSubFolder.Active ){
				root =  System.IO.Path.Combine(this.feRoot.Path,worksp);
			}
			else { 
				root = feRoot.Path;
			}

			string workspaceFile = System.IO.Path.Combine(root, worksp + ".msw");
			if(File.Exists(workspaceFile)){

				MessageDialogs md = new MessageDialogs(MessageDialogs.DialogButtonType.Ok, MainClass.Languages.Translate("workspace_exist"), "", Gtk.MessageType.Error,this);
				md.ShowDialog();
				return false;
			}

			return true;
		}

		protected void OnCbAppTypChanged (object sender, System.EventArgs e)
		{
			TreeIter ti = new TreeIter();
			cbAppTyp.GetActiveIter(out ti);
			string text = cbAppTyp.Model.GetValue(ti,1).ToString();

			if(text == "application")
				isApplicationType = true;
			else isApplicationType =false;
		}
	}
}

